// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DataNodeClient is the client API for DataNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataNodeClient interface {
	UpploadChunks(ctx context.Context, opts ...grpc.CallOption) (DataNode_UpploadChunksClient, error)
	DowloadChunks(ctx context.Context, in *RequestChunk, opts ...grpc.CallOption) (*Chunk, error)
	StateRequest(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	ProposalRequest(ctx context.Context, in *Proposal, opts ...grpc.CallOption) (*Response, error)
}

type dataNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewDataNodeClient(cc grpc.ClientConnInterface) DataNodeClient {
	return &dataNodeClient{cc}
}

func (c *dataNodeClient) UpploadChunks(ctx context.Context, opts ...grpc.CallOption) (DataNode_UpploadChunksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataNode_serviceDesc.Streams[0], "/pb.DataNode/UpploadChunks", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeUpploadChunksClient{stream}
	return x, nil
}

type DataNode_UpploadChunksClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type dataNodeUpploadChunksClient struct {
	grpc.ClientStream
}

func (x *dataNodeUpploadChunksClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataNodeUpploadChunksClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataNodeClient) DowloadChunks(ctx context.Context, in *RequestChunk, opts ...grpc.CallOption) (*Chunk, error) {
	out := new(Chunk)
	err := c.cc.Invoke(ctx, "/pb.DataNode/DowloadChunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) StateRequest(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.DataNode/StateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) ProposalRequest(ctx context.Context, in *Proposal, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.DataNode/ProposalRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataNodeServer is the server API for DataNode service.
// All implementations must embed UnimplementedDataNodeServer
// for forward compatibility
type DataNodeServer interface {
	UpploadChunks(DataNode_UpploadChunksServer) error
	DowloadChunks(context.Context, *RequestChunk) (*Chunk, error)
	StateRequest(context.Context, *Empty) (*Empty, error)
	ProposalRequest(context.Context, *Proposal) (*Response, error)
	mustEmbedUnimplementedDataNodeServer()
}

// UnimplementedDataNodeServer must be embedded to have forward compatible implementations.
type UnimplementedDataNodeServer struct {
}

func (UnimplementedDataNodeServer) UpploadChunks(DataNode_UpploadChunksServer) error {
	return status.Errorf(codes.Unimplemented, "method UpploadChunks not implemented")
}
func (UnimplementedDataNodeServer) DowloadChunks(context.Context, *RequestChunk) (*Chunk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DowloadChunks not implemented")
}
func (UnimplementedDataNodeServer) StateRequest(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateRequest not implemented")
}
func (UnimplementedDataNodeServer) ProposalRequest(context.Context, *Proposal) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposalRequest not implemented")
}
func (UnimplementedDataNodeServer) mustEmbedUnimplementedDataNodeServer() {}

// UnsafeDataNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataNodeServer will
// result in compilation errors.
type UnsafeDataNodeServer interface {
	mustEmbedUnimplementedDataNodeServer()
}

func RegisterDataNodeServer(s *grpc.Server, srv DataNodeServer) {
	s.RegisterService(&_DataNode_serviceDesc, srv)
}

func _DataNode_UpploadChunks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataNodeServer).UpploadChunks(&dataNodeUpploadChunksServer{stream})
}

type DataNode_UpploadChunksServer interface {
	SendAndClose(*Response) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type dataNodeUpploadChunksServer struct {
	grpc.ServerStream
}

func (x *dataNodeUpploadChunksServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataNodeUpploadChunksServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataNode_DowloadChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestChunk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).DowloadChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DataNode/DowloadChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).DowloadChunks(ctx, req.(*RequestChunk))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_StateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).StateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DataNode/StateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).StateRequest(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_ProposalRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Proposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).ProposalRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DataNode/ProposalRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).ProposalRequest(ctx, req.(*Proposal))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DataNode",
	HandlerType: (*DataNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DowloadChunks",
			Handler:    _DataNode_DowloadChunks_Handler,
		},
		{
			MethodName: "StateRequest",
			Handler:    _DataNode_StateRequest_Handler,
		},
		{
			MethodName: "ProposalRequest",
			Handler:    _DataNode_ProposalRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpploadChunks",
			Handler:       _DataNode_UpploadChunks_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "Lab_2.proto",
}

// NameNodeClient is the client API for NameNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameNodeClient interface {
	FinalProposal(ctx context.Context, in *Proposal, opts ...grpc.CallOption) (*Empty, error)
	FileRequest(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NameNode_FileRequestClient, error)
	AddressRquest(ctx context.Context, in *File, opts ...grpc.CallOption) (NameNode_AddressRquestClient, error)
}

type nameNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNameNodeClient(cc grpc.ClientConnInterface) NameNodeClient {
	return &nameNodeClient{cc}
}

func (c *nameNodeClient) FinalProposal(ctx context.Context, in *Proposal, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.NameNode/FinalProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeClient) FileRequest(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NameNode_FileRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NameNode_serviceDesc.Streams[0], "/pb.NameNode/FileRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &nameNodeFileRequestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NameNode_FileRequestClient interface {
	Recv() (*File, error)
	grpc.ClientStream
}

type nameNodeFileRequestClient struct {
	grpc.ClientStream
}

func (x *nameNodeFileRequestClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nameNodeClient) AddressRquest(ctx context.Context, in *File, opts ...grpc.CallOption) (NameNode_AddressRquestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NameNode_serviceDesc.Streams[1], "/pb.NameNode/AddressRquest", opts...)
	if err != nil {
		return nil, err
	}
	x := &nameNodeAddressRquestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NameNode_AddressRquestClient interface {
	Recv() (*ChunkAddress, error)
	grpc.ClientStream
}

type nameNodeAddressRquestClient struct {
	grpc.ClientStream
}

func (x *nameNodeAddressRquestClient) Recv() (*ChunkAddress, error) {
	m := new(ChunkAddress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NameNodeServer is the server API for NameNode service.
// All implementations must embed UnimplementedNameNodeServer
// for forward compatibility
type NameNodeServer interface {
	FinalProposal(context.Context, *Proposal) (*Empty, error)
	FileRequest(*Empty, NameNode_FileRequestServer) error
	AddressRquest(*File, NameNode_AddressRquestServer) error
	mustEmbedUnimplementedNameNodeServer()
}

// UnimplementedNameNodeServer must be embedded to have forward compatible implementations.
type UnimplementedNameNodeServer struct {
}

func (UnimplementedNameNodeServer) FinalProposal(context.Context, *Proposal) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalProposal not implemented")
}
func (UnimplementedNameNodeServer) FileRequest(*Empty, NameNode_FileRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method FileRequest not implemented")
}
func (UnimplementedNameNodeServer) AddressRquest(*File, NameNode_AddressRquestServer) error {
	return status.Errorf(codes.Unimplemented, "method AddressRquest not implemented")
}
func (UnimplementedNameNodeServer) mustEmbedUnimplementedNameNodeServer() {}

// UnsafeNameNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameNodeServer will
// result in compilation errors.
type UnsafeNameNodeServer interface {
	mustEmbedUnimplementedNameNodeServer()
}

func RegisterNameNodeServer(s *grpc.Server, srv NameNodeServer) {
	s.RegisterService(&_NameNode_serviceDesc, srv)
}

func _NameNode_FinalProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Proposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServer).FinalProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NameNode/FinalProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServer).FinalProposal(ctx, req.(*Proposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNode_FileRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NameNodeServer).FileRequest(m, &nameNodeFileRequestServer{stream})
}

type NameNode_FileRequestServer interface {
	Send(*File) error
	grpc.ServerStream
}

type nameNodeFileRequestServer struct {
	grpc.ServerStream
}

func (x *nameNodeFileRequestServer) Send(m *File) error {
	return x.ServerStream.SendMsg(m)
}

func _NameNode_AddressRquest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(File)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NameNodeServer).AddressRquest(m, &nameNodeAddressRquestServer{stream})
}

type NameNode_AddressRquestServer interface {
	Send(*ChunkAddress) error
	grpc.ServerStream
}

type nameNodeAddressRquestServer struct {
	grpc.ServerStream
}

func (x *nameNodeAddressRquestServer) Send(m *ChunkAddress) error {
	return x.ServerStream.SendMsg(m)
}

var _NameNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NameNode",
	HandlerType: (*NameNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FinalProposal",
			Handler:    _NameNode_FinalProposal_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FileRequest",
			Handler:       _NameNode_FileRequest_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddressRquest",
			Handler:       _NameNode_AddressRquest_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "Lab_2.proto",
}
